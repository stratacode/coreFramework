import java.text.DecimalFormat;
import java.util.Map;

@sc.js.JSSettings(jsLibFiles="js/util.js", prefixAlias="sc_")
public class TextUtil {
   // Accepts any Number including BigDecimal for symmetric formatting on server and client
   public static String format(String format, Object number) {
      DecimalFormat df = new DecimalFormat(format);
      return df.format(number);
   }

   // Currently the data binding system can't listen on method calls but can for function arguments so this is a workaround
   public static int length(String str) {
      if (str == null)
         return 0;
      return str.length();
   }

   public static boolean isEmpty(String str) {
      return str == null || str.length() == 0;
   }

   public static boolean equals(CharSequence s1, CharSequence s2) {
      if (s1 == s2)
         return true;
      if (s1 == null || s2 == null)
         return false;
      int s1len = s1.length();
      int s2len = s2.length();
      if (s1len != s2len)
         return false;
      for (int i = 0; i < s1len; i++) {
         if (s1.charAt(i) != s2.charAt(i))
            return false;
      }
      return true;
   }

   public static String escapeHTML(String in) {
      return StringUtil.escapeHTML(in, false).toString();
   }

   public static String escapeQuotes(String in) {
      return in.replace("'","&apos;").replace("\"", "&quot;");
   }

   private final static String allowedEmailChars = "+_!%#$&'*/=^`{}|~;";

   public static String validateEmailAddress(String emailAddress) {
      if (emailAddress == null || emailAddress.length() == 0)
         return "Empty email address";
      if (emailAddress.length() > 256)
         return "Email address is too long";

      int atIx = emailAddress.indexOf('@');
      if (atIx == -1 || emailAddress.length() - atIx < 5)
         return "Email address invalid";
      String local = emailAddress.substring(0, atIx);
      String domain = emailAddress.substring(atIx+1);
      int lastDot = -1;
      int i;
      int localLen = local.length();
      boolean quoted = false;
      for (i = 0; i < localLen; i++) {
         char l = local.charAt(i);
         if (l == '.') {
            if (i == 0 || i == localLen - 1)
               break;
            if (lastDot == i - 1)
               break;
            lastDot = l;
         }
         else if (l == '-') {
            if (i == 0 || i == localLen - 1)
               break;
         }
         else if (l == '"') {
            if (i == 0)
               quoted = true;
            else if (quoted && l != localLen - 1)
               break;
         }
         else if (Character.isWhitespace(l)) {
            if (!quoted)
              break;
         }
         else if (!Character.isLetterOrDigit(l)) {
            if (allowedEmailChars.indexOf(l) == -1)
               break;
         }
      }
      if (i != localLen)
         return "Invalid email name: expected name@server.domain";

      int domainLen = domain.length();
      boolean foundDot = false;
      for (i = 0; i < domainLen; i++) {
         char d = domain.charAt(i);
         if (d == '.') {
            if (i == domainLen - 1)
               break;
            foundDot = true;
         }
         else if (!Character.isLetterOrDigit(d) && d != '-')
            break;
      }
      if (i != domainLen || !foundDot)
         return "Invalid email server: expected name@server.domain";
      return null;
   }

   public static boolean hasMapEntry(Map<String,String> map, String key) {
      return map != null && map.containsKey(key);
   }

   public final static long hourMillis = 1000 * 60 * 60;
   public final static long dayMillis = hourMillis * 24;

   public static String formatUserDate(Date date, boolean includeTime) {
      if (date == null)
         return "";
      Date now = new Date();
      StringBuilder sb = new StringBuilder();
      long nowTime = now.getTime();
      long dateTime = date.getTime();
      boolean handled = false;
      long delta = nowTime - dateTime;
      if (delta > 0 || -delta < hourMillis) {
         if (delta < dayMillis) {
            if (now.getDate() == date.getDate())
               sb.append("today");
            else if (new Date(dateTime + dayMillis).getDate() == now.getDate())
               sb.append("yesterday");
            handled = true;
         }
         else if (new Date(dateTime + dayMillis).getDate() == now.getDate()) {
            sb.append("yesterday");
            handled = true;
         }
      }
      else if (delta < 0 && -delta < dayMillis && new Date(nowTime + dayMillis).getDate() == date.getDate()) {
         sb.append("tomorrow");
         handled = true;
      }

      if (!handled) {
         int dateYear = date.getYear();
         int nowYear = now.getYear();

         if (nowYear != dateYear) {
            sb.append(date.getYear() + 1900);
            sb.append("-");
         }
         sb.append(twoDigit(date.getMonth()+1));
         sb.append("-");
         sb.append(twoDigit(date.getDate()));
      }
      if (includeTime) {
         sb.append(" ");
         sb.append(date.getHours());
         sb.append(":");
         sb.append(twoDigit(date.getMinutes()));
      }
      return sb.toString();
   }

   public static String twoDigit(int val) {
      if (val < 10)
         return "0" + val;
      return String.valueOf(val);
   }

   public static String formatDuration(int millisInt) {
      StringBuilder sb = new StringBuilder();
      long millis = (long) millisInt;
      long numDays = millis / dayMillis;
      millis = millis - numDays * dayMillis;
      long numHours = millis / hourMillis;
      millis = millis - numHours * hourMillis;
      long numMinutes = millis / (1000 * 60);
      millis = millis - numMinutes * 1000 * 60;
      long numSecs = millis / 1000;
      millis = millis - numSecs * 1000;
      boolean first = true;
      if (numDays > 0) {
         sb.append(numDays + "d");
         first = false;
      }
      if (numHours > 0 || !first) {
         sb.append(numHours + "h");
         first = false;
      }
      if (numMinutes > 0 || !first) {
         sb.append(twoDigit((int) numMinutes) + "m");
      }
      if (numSecs > 0 || !first) {
         sb.append(twoDigit((int) numSecs));
         if (millis > 0) {
            sb.append("." + millis);
         }
         sb.append("s");
      }
      return sb.toString();
   }
}
