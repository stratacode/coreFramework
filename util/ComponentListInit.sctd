<% if (!overrideField && !overrideGet) { %>
   <%=fieldModifiers%> <%=variableTypeName%> <%=lowerClassName%>;
<% } %>
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>(boolean doInit) {
<% if (overrideGet) { %>
   <%=variableTypeName%> <%=lowerClassName%> = (<%=variableTypeName%>) super.get<%=upperClassName%>();
<% } %>
   if (<%=lowerClassName%> == null) {
      <%=variableTypeName%> _<%=lowerClassName%> = <% if (typeIsComponentClass) { %><%=typeClassName%>.new<%=typeBaseName%>(false)<% } else { %>new <%=typeName%>()<% } %>;
      <%=lowerClassName%> = _<%=lowerClassName%>;
     <% if (overrideGet) { %>
         set<%=upperClassName%>(_<%=lowerClassName%>);
     <% } %>
     _<%=lowerClassName%>.preInit();
     <%=getDynamicTypeDefinition("_" + lowerClassName, 2)%><%=propertyAssignments%>
     java.util.List<? extends <%=childTypeName%>> _children = java.util.Arrays.asList(<%=childrenNames%>);
     for (<%=childTypeName%> _child:_children) {
        _<%=lowerClassName%>.add(_child);
     }
     if (doInit) {
       _<%=lowerClassName%>.init();
       _<%=lowerClassName%>.start();
     }
     return <%=returnCast%>_<%=lowerClassName%>;
  }
  else {
     <%=variableTypeName%> _<%=lowerClassName%> = <%=returnCast%><%=lowerClassName%>;
     <%=accessHook%>
     return _<%=lowerClassName%>;
  }
}
@sc.obj.TypeSettings(objectType=true)
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>() { return get<%=upperClassName%>(true); }
