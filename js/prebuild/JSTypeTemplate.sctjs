<%@ import java.util.List;
    import sc.type.MethodBindSettings; %>
<% if (!mergeTemplate) { 
      %>// Generated JS from Java: <%= javaTypeName %> -----
<% } else { 
      %>// JS Updates for changed Java type: <%= javaTypeName %> -----
<% } %><% 
if (needsConstructor) {
   %>function <%= typeName %>(<%= constructor.argNames %>) {
<%= superClassInit %><%= classInit %><%=
     // Only set this.outer for the first outer class in the chain of inherited outer classes.  It will be reset to the real outer class the first time it is initialized in the instance's actual class
     // If we set it again, we are overridding it with a potentially different and incorrect value in the base class (since we can inherit from the same class at different levels of the same inner class tree).
     outerInstCount == 0 ? "" : "\n   this._outer" + outerInstCount + " = _outer;\n   if (this.outer === undefined) this.outer = _outer;\n" %><%
   for (JSStatement initStatement:preInitStatements) {%><%= replaceIndent(1, initStatement.toString()) %><% } %><%
   if (!constructor.needsDispatch) {
         if (constructor.varArgs) { %>
   var <%= constructor.varArgsParamName %> = sc_vararg(arguments, <%= constructor.getNumParameters()-1 %>);<%
         } %><%=
         constructor.getMethodBody(1) %><%
      }
      else if (constructor.variableParamNum) {
         boolean first = true;
         for (List<JSMethod> paramMeths:constructor.methsByParamNum) { %>
   <%= first ? "" : "else "
            %>if (arguments.length == <%= (paramMeths.get(0).numParameters + paramMeths.get(0).outerParamOffset) %>) {<%
               if (paramMeths.size() == 1) {
                  int pct = paramMeths.get(0).outerParamOffset;
                  JSMethod paramMeth = paramMeths.get(0);
                  for (JSParameter param:paramMeth.parameters) { %>
      var <%= param.name %> = arguments[<%= pct++ %>];<% } %><%= paramMeth.getMethodBody(2) %><%
               }
               else {
                  int methCt = 0;
                  for (JSMethod paramMeth:paramMeths) { %><%= methCt == 0 ? "\n      " : "else "%>if (<%
                         int pct = paramMeth.outerParamOffset;
                         for (JSParameter param:paramMeth.parameters) {
                            %><%= pct == paramMeth.outerParamOffset ? "" : " && "
                            %><%= param.instanceOf%>(arguments[<%= pct++ %>], <%= param.type %><%= param.numDimsStr %>)<%
                         }
                     %>) { <%
                     pct = paramMeth.outerParamOffset;
                     for (JSParameter param:paramMeth.parameters) { %>
         var <%= param.name %> = arguments[<%= pct++ %>];<% } %><%=
                       paramMeth.getMethodBody(3) %>}<% methCt++;
                  }
              } %>   }<% first = false;
         }
      }
      else { %><%
         int methCt = 0;
         for (JSMethod paramMeth:constructor.methAliases) {
            %>
      <%= methCt == 0 ? "" : "else "%>if (<%
            int pct = paramMeth.outerParamOffset;
            boolean first = true;
            if (constructor.anyVarArgs) { %>arguments.length <%= paramMeth.varArgs ? ">=" : "==" %><%=(paramMeth.numNonVarArgsParameters+paramMeth.outerParamOffset)%><%
               first = false;
            }
            for (JSParameter param:paramMeth.parameters) {
               %><%= first ? "" : " && "
               %><%= param.instanceOf%>(arguments[<%= pct++ %>], <%= param.type %><%= param.numDimsStr %>)<%
               first = false;
            }
            %>) { <%
            pct = 0;
            for (JSParameter param:paramMeth.parameters) { %>
      var <%= param.name %> = arguments[<%= pct++ %>];<% 
            }
            if (constructor.varArgs) { %>
      var <%= constructor.varArgsParamName %> = sc_vararg(arguments, <%= pct %>);<%
            } %><%= paramMeth.getMethodBody(2) %>}<% methCt++; 
         }
      }
%>}<%
} %>

<% // If we are reusing the same type but have a new constructor, update the prototype of the constructor to point to the old type rather than define a new one. This avoids having to copy and update all of the static state
   if (needsConstructor && !needsClassDef) {%><%= typeName %>.prototype = <%= JSTypeName %>;
<% } %><% if (needsClassDef) {
%>var <%= useShortTypeNames ? "_c , " : "" %><%= JSTypeName %> = <%= useShortTypeNames ? "_c = " :"" %><%= newClassMethodName %>("<%= javaTypeName %>", <%= typeName %>,<%= outerClassArg %> <%= extendsClass %>, <%= implementsClasses %>);
<% } else if (hasTypeChanges && useShortTypeNames) {
%>var _c = <%= JSTypeName %>;
<% } %>
<%= annotations %><%= propertyMetadata %><%= methodMetadata %><%= typeAliases %><% for (JSMethod meth:methods) { %><%= shortJSTypeName%>.<%= meth.name%> = function (<%= meth.argNames %>) <%= meth.needsDispatch ? '/' + "* overloaded *" + '/' : "" %> {<%
      if (meth.getWithArgs) { %>
   if (arguments.length == 0) return;<% } %><%= meth.methodClassInit %><%
      if (!meth.needsDispatch) {
         if (meth.varArgs) { %>
   var <%= meth.varArgsParamName %> = sc_vararg(arguments, <%= meth.getNumParameters()-1 %>);<%
         } %><%=
         meth.getMethodBody(1) %><%
      }
      else if (meth.variableParamNum) {
         boolean first = true;
         for (List<JSMethod> paramMeths:meth.methsByParamNum) {
            %>
   <%= first ? "" : "else "
            %>if (arguments.length == <%= paramMeths.get(0).numParameters %>) {<%
               if (paramMeths.size() == 1) { 
                  int pct = 0;
                  JSMethod paramMeth = paramMeths.get(0);
                  for (JSParameter param:paramMeth.parameters) { %>
      var <%= param.name %> = arguments[<%= pct++ %>];<% } %><%= paramMeth.getMethodBody(2) %><%
               }
               else {
                  int methCt = 0;
                  for (JSMethod paramMeth:paramMeths) { %><%= methCt == 0 ? "\n      " : "else "%>if (<%
                         int pct = 0;
                         for (JSParameter param:paramMeth.parameters) { 
                            %><%= pct == 0 ? "" : " && "
                            %><%= param.instanceOf %>(arguments[<%= pct++ %>], <%= param.type %><%= param.numDimsStr %>)<%
                         }
                     %>) { <%
                     pct = 0;
                     for (JSParameter param:paramMeth.parameters) { %>
         var <%= param.name %> = arguments[<%= pct++ %>];<%
                     }
                     if (paramMeth.varArgs) { %>
         var <%= paramMeth.varArgsParamName %> = sc_vararg(arguments, <%= pct %>);<%
                     } %><%=
                       paramMeth.getMethodBody(3) %>}<% methCt++;
                  }
             } %>   }<%           first = false;
         } %>
   else sc_noMeth("<%= meth.name %>");
<%
      } else { %><% 
         int methCt = 0;
         for (JSMethod paramMeth:meth.methAliases) {
            %>
      <%= methCt == 0 ? "" : "else "%>if (<%
            int pct = 0;
            boolean first = true;
            if (meth.anyVarArgs) { %>arguments.length <%= paramMeth.varArgs ? ">=" : "==" %><%=paramMeth.numNonVarArgsParameters%><%
               first = false;
            }
            for (JSParameter param:paramMeth.parameters) {
               %><%= first ? "" : " && "
               %><%= param.instanceOf %>(arguments[<%= pct++ %>], <%= param.type %><%= param.numDimsStr %>)<%
               first = false;
            }
            %>) { <%
            pct = 0;
            for (JSParameter param:paramMeth.parameters) { %>
      var <%= param.name %> = arguments[<%= pct++ %>];<%
            }
            if (paramMeth.varArgs) { %>
      var <%= paramMeth.varArgsParamName %> = sc_vararg(arguments, <%= pct %>);<%
            } %><%=
            paramMeth.getMethodBody(2) %>}<% methCt++;  
        }
     }
   %>};
<% } %><% if (needsInstInit) { %>
<%=shortJSTypeName%>._<%= typeName%>Init = function() {
<%
   for (JSStatement initStatement:initStatements) {
      %><%= replaceIndent(1, initStatement.toString()) %><%
   } %>};<% } %><% if (needsClassInit) { %>
<%=shortJSTypeName%>._clInit = function() {
   if (<%= JSTypeName %>.hasOwnProperty("_clInited")) return;
   <%= JSTypeName %>._clInited = true;
   <% for (JSMethod meth:methods) {
   MethodBindSettings mbs = meth.getBindSettings();
   if (mbs != null) { %>
   <%= JSTypeName %>._<%= meth.name %>MethBindSettings = new sc_MethodBindSettings(<%= JSTypeName %>.<%= mbs.reverseMethodName %>, <%= mbs.reverseSlot %>, <%= mbs.forwardSlot %>, <%= mbs.modifyParam %>, <%= mbs.oneParamReverse %>, <%= mbs.reverseMethodStatic %>);
<% } } %>
<% for (JSStatement initStatement:staticInitStatements) {
     %>   <%= initStatement %><%
   }
%>};
<% } %>
