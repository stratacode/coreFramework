import sc.bind.Bind;
import sc.layer.Layer;

import sc.lang.ClientEditorContext;
import sc.lang.java.ModelUtil;

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;

import sc.dyn.DynUtil;

@sc.obj.Sync(onDemand=true)
@sc.obj.SyncTypeFilter(typeNames={"sc.layer.LayeredSystem",
        "sc.layer.Options", "sc.lang.sc.ModifyDeclaration", "sc.lang.java.EnumDeclaration",
        "sc.lang.java.InterfaceDeclaration", "sc.lang.java.AnnotationTypeDeclaration", "sc.lang.java.EnumConstant",
        "sc.lang.java.ClassDeclaration", "sc.lang.java.ClientTypeDeclaration", "sc.lang.java.VariableDefinition",
        "sc.lang.sc.PropertyAssignment", "sc.lang.sc.OverrideAssignment", "sc.lang.java.JavaModel", "sc.lang.sc.SCModel",  "sc.lang.template.Template",
        "sc.layer.SrcEntry", "sc.lang.java.ParamTypedMember", "sc.lang.java.ParamTypeDeclaration",
        "java.lang.reflect.Field", "sc.lang.reflect.Method", "sc.lang.java.MethodDefinition", "sc.lang.java.ConstructorDefinition",
        "sc.type.BeanMapper", "sc.type.BeanIndexMapper", "sc.layer.Layer", "sc.lang.java.Parameter",
        // From EditorContext (JLineInterpreter is replaced with EditorContext on the client so is implicitly sync'd)
        "sc.lang.JLineInterpreter", "sc.lang.EditorContext", "sc.lang.MemoryEditSession", "sc.sync.ClassSyncWrapper",
        "sc.lang.InstanceWrapper", "sc.lang.CompletionResult"})
public class EditorContext extends ClientEditorContext {
   Object currentType;

   public static final int MaxCompletions = 20;

   public final static int MaxInstancesOfType = 100;

   // TODO: add hook for a dispose listener or use JS weak hashmap to support Weak hashmaps through the JS emulation
   Map<Object,InstanceWrapper> instanceWrappers = new java.util.IdentityHashMap<Object,InstanceWrapper>();

   public List<InstanceWrapper> getInstancesOfType(Object type, int max, boolean addNull, String nullLabelName, boolean selectToCreate) {
      ArrayList<InstanceWrapper> ret = new ArrayList<InstanceWrapper>();
      if (type == null)
         return ret;
      String typeName = ModelUtil.getTypeName(type);
      if (typeName == null) {
          System.err.println("*** Error: no type name for type!");
          return ret;
      }
      Object[] insts = DynUtil.getInstancesOfTypeAndSubTypes(typeName);
      int i = 0;
      // Add a null entry at the front to represent the <type> selection
      if (addNull)
         ret.add(new InstanceWrapper(this, null, typeName, nullLabelName, selectToCreate));

      // TODO: need a way to test for jv_Enum and then get the instance
      //if (ModelUtil.isEnum(type)) {
      //   ret.add(new InstanceWrapper(this, ModelUtil.getRuntimeEnum(type), typeName));
      //}

      if (insts == null)
         return ret;

      int sz = insts.length;
      for (i = 0; i < max && i < sz; i++) { 
         Object inst = insts[i];
         ret.add(getOrCreateInstanceWrapper(inst));
      }
      return ret;
   }

   InstanceWrapper getOrCreateInstanceWrapper(Object inst) {
      InstanceWrapper wrapper = instanceWrappers.get(inst);
      if (wrapper == null) {
         wrapper = new InstanceWrapper(this, inst, DynUtil.getTypeName(DynUtil.getType(inst), false), null, false);
         instanceWrappers.put(inst, wrapper);
      }
      return wrapper;
   }

   private boolean needsSave = false;
   @Bindable(manual=true)
   public boolean getNeedsSave() {
      return needsSave;
   }

   public void setNeedsSave(boolean val) {
      needsSave = val;
      Bind.sendChangedEvent(this, "needsSave");
   }

   private boolean canUndo = false;
   @Bindable(manual=true)
   public boolean getCanUndo() {
      return canUndo;
   }
   public void setCanUndo(boolean val) {
      canUndo = val;
      Bind.sendChangedEvent(this, "canUndo");
   }

   private boolean canRedo = false;
   @Bindable(manual=true)
   public boolean getCanRedo() {
      return canRedo;
   }
   public void setCanRedo(boolean val) {
      canRedo = val;
      Bind.sendChangedEvent(this, "canRedo");
   }

}
