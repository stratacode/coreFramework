package sc.lang;

import sc.dyn.DynUtil;
import sc.type.CTypeUtil;
import sc.obj.Sync;
import sc.obj.SyncMode;

@Sync(onDemand=true)
public class InstanceWrapper implements sc.obj.IObjectId {
   @Sync(syncMode=SyncMode.Disabled)
   EditorContext ctx;
   @Sync(syncMode=SyncMode.Disabled)
   Object theInstance;
   @Sync(syncMode=SyncMode.Disabled)
   boolean selectToCreate = false;
   @Sync(syncMode=SyncMode.Disabled)
   String typeName;

   @Sync(syncMode=SyncMode.Disabled)
   String labelName;
/*
   public InstanceWrapper(EditorContext ctx, boolean canCreate, String typeName) {
      this.typeName = typeName;
      this.canCreate = canCreate;
      this.ctx = ctx;
   }
*/

   public InstanceWrapper(EditorContext ctx, Object inst, String typeName, String labelName, boolean selectToCreate) {
      this.theInstance = inst;
      this.ctx = ctx;
      this.typeName = typeName;
      this.labelName = labelName;
      this.selectToCreate = selectToCreate;
   }

   public Object getInstance() {
      if (theInstance != null)
         return theInstance;

      if (selectToCreate)
         return theInstance = DynUtil.resolveName(typeName, true);

      return null;
   }

   public String toString() {
      if (labelName != null)
         return labelName;
      if (theInstance == null)
         return typeName != null ? (selectToCreate ? "<select to create>" : "<type>") : "<type>";
      return DynUtil.getInstanceName(theInstance);
   }

   public boolean equals(Object other) {
      if (other instanceof InstanceWrapper) {
         InstanceWrapper otherInst = (InstanceWrapper) other;
         if (!DynUtil.equalObjects(typeName, otherInst.typeName))
            return false;
         return DynUtil.equalObjects(otherInst.theInstance, theInstance);
      }
      return false;
   }

   public int hashCode() {
      if (theInstance == null) {
         if (typeName != null)
            return typeName.hashCode();
         return 0;
      }
      return theInstance.hashCode();
   }

   public String getObjectId() {
      StringBuilder sb = new StringBuilder();
      sb.append("IW__");
      if (theInstance == null && typeName != null) {
         sb.append(typeName);
         sb.append("__");
      }
      if (theInstance != null) {
         sb.append(CTypeUtil.escapeIdentifierString(DynUtil.getInstanceId(theInstance)));
      }
      return sb.toString();
   }
}
