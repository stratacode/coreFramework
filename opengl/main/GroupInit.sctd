/** 
 * Snippet to be inserted for each object definition which extends the swing JComponent class
 * Accumulates the children objects and adds them.
 */
<% if (!overrideField && !overrideGet) { %>
   <%=fieldModifiers%> <%=variableTypeName%> <%=lowerClassName%>;
<% } %>
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>(boolean doInit) {
<% if (overrideGet) { %>
   <%=variableTypeName%> <%=lowerClassName%> = (<%=variableTypeName%>) super.get<%=upperClassName%>();\
<% } %>
   if (<%=lowerClassName%> == null) {
      <%=variableTypeName%> _<%=lowerClassName%> = <% if (typeIsComponentClass) { %><%=typeClassName%>.new<%=typeBaseName%>(false)<% } 
                               else { %>new <%=typeName%>()<% } %>;
      <%=lowerClassName%> = _<%=lowerClassName%>;

<% if (overrideGet) { %>
      set<%=upperClassName%>(_<%=lowerClassName%>);
<% } %>
      _<%=lowerClassName%>.preInit();
      <%=getDynamicTypeDefinition("_" + lowerClassName, 2)%><%=propertyAssignments%>
      java.util.List _children = java.util.Arrays.asList(<%=childrenNames%>);
      for (Object _child:_children) {
         if (_child instanceof sc.opengl.IRenderNode) {
             sc.opengl.IRenderNode _jc = (sc.opengl.IRenderNode) _child;
             <%=lowerClassName%>.addChild(_jc);
         }
      }
      if (doInit) {
         _<%=lowerClassName%>.init();
         _<%=lowerClassName%>.start();
      }
      return _<%=lowerClassName%>;
   }
   else {
      <%=variableTypeName%> _<%=lowerClassName%> = <%=returnCast%><%=lowerClassName%>;<%=accessHook%>
      return <%=lowerClassName%>;
   }
}
@sc.obj.TypeSettings(objectType=true)
<%=getModifiers%> <%=variableTypeName%> get<%=upperClassName%>() { return <%=returnCast%>get<%=upperClassName%>(true); }
